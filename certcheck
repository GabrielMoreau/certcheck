#!/bin/bash
#
# 2023/07/28 Gabriel Moreau <Gabriel.Moreau@univ-grenoble-alpes.fr>

export PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin
export LANG=C

export VERSION=0.3.15

function usage() {
   cat <<END_USAGE
certcheck - check certificate chain or self-signed

 certcheck check cert_base_name
 certcheck text  cert_base_name.pub.pem
 certcheck txt   cert_base_name.pub.pem
 certcheck info  cert_base_name.pub.pem
 certcheck version
 certcheck help

txt and info subcommand are just alias for text.
END_USAGE
   }

function say_warning() {
   echo "Warning: $*" >&2
   exit 23
   }

[ -z "$(pidof openssl)" ] || say_warning "openssl running, consider: killall openssl"

PID_SSL=
function call_server_kick() {
   [ -n "${PID_SSL}" ] && kill "${PID_SSL}" && sleep .2
   PID_SSL=
}

trap 'call_server_kick' 0

function call_server_launch() {
   call_server_kick
   PID_SSL=
   openssl s_server -key "${KEY}" -cert "${CRT}" "$@" -www > /dev/null &
   PID_SSL=$!
   sleep .5    # give it time to startup
}

function check_client_chained() {
   while read -r line
   do
      case "$line" in
         'Verify return code: 0 (ok)')
            return 0
            ;;
         'Verify return code: '*)
            return 1
            ;;
      esac
   done < <(echo | openssl s_client -verify 8 -CApath /etc/ssl/certs/)
   say_warning "something failed, verification output not found!"
   return 2
}

function check_client_selfsigned() {
   echo | openssl s_client -verify 8 -CApath /etc/ssl/certs/ 2>&1 | grep -q 'Verification error: self-signed certificate' && return 0
   say_warning "something failed, verification output not found!"
   return 2
}

function check_cert_ischained() {
   local public_cert=$1
   
   # return 0: chain certificate, 1: self-signed certificate
   same=$(openssl x509 -noout -text -in "${public_cert}" \
      | grep -E '[[:space:]](Subject|Issuer):[[:space:]]' \
      | sed -e 's/^[[:space:]]*Subject//; s/^[[:space:]]*Issuer//;' \
      | sort \
      | uniq -c \
      | awk '{print $1}' \
      | head -1)
   return $((${same} - 1))
}

function call_configfiles() {
   [ -s "${CRT}" ] || CRT="${ARG}"
   [ -s "${CRT}" ] || CRT="${ARG}.cer"
   [ -s "${CRT}" ] || CRT="${ARG}.pub.pem"
   [ -s "${KEY}" ] || KEY="${ARG}.keystore"
   [ -s "${KEY}" ] || KEY="${ARG}.key.pem"
   [ -s "${BND}" ] || BND="${ARG}.ca-bundle"
   [ -s "${BND}" ] || BND="${ARG}.chain.pem"
}

action=$1; shift
ARG="${1%.}"
CRT="${ARG}.crt"
KEY="${ARG}.key"
BND="${ARG}.bundle"
call_configfiles

case "${action}" in
   check)
      for cert in "${KEY}" "${CRT}"
      do
         [ -s "${cert}" ] || say_warning "missing ${cert}"
      done
      if check_cert_ischained "${CRT}"
      then
         [ -s "${BND}" ] || say_warning "missing ${BND}"
      fi

      call_server_launch
      if check_cert_ischained "${CRT}"
      then
        check_client_chained && echo "Error: CA-Bundle is not needed!"
        call_server_launch -CAfile "${BND}"
        check_client_chained
      else
        check_client_selfsigned || echo "Error: not self-signed certificate!"
      fi
      ret=$?
      call_server_kick

      echo
      case ${ret} in
         0)
            echo "Ok: everything is good"
            echo "ApacheConf: SSLCertificateKeyFile ${KEY}"
            echo "ApacheConf: SSLCertificateFile    ${CRT}"
            check_cert_ischained "${CRT}" && echo "ApacheConf: SSLCACertificateFile  ${BND}"
            ;;
         *)
            echo "Error: something is wrong, verification failed! ($ret)"
            ;;
      esac

      exit $ret
      ;;

   text|txt|info)
      [ -s "${CRT}" ] || say_warning "missing ${CRT}"
      if grep -q -- '-----BEGIN PRIVATE KEY-----' "${CRT}"
      then
         # Cert could have the public and private part in the same file
         grep -q -- '-----BEGIN CERTIFICATE-----' "${CRT}" || say_warning 'give the public and not the private key!'
      fi
      grep -q -- '-----BEGIN CERTIFICATE-----' "${CRT}" || say_warning "your key isn't in PEM format!"
      openssl x509 -noout -text -in "${CRT}" \
         | grep -E '(Subject|Not Before|Not After[[:space:]]|DNS|Issuer):' \
         | sed -e 's/^\s*//g;' \
         | sort -r
      ;;

   version)
      echo "Version: ${VERSION}"
      ;;

   help|*)
      usage
      ;;
esac

exit 0


################################################################
# documentation
################################################################

__END__

=head1 NAME

certcheck - check certificate chain or self-signed

=head1 SYNOPSIS

 certcheck check cert_base_name
 certcheck text  cert_base_name.pub.pem
 certcheck txt   cert_base_name.pub.pem
 certcheck info  cert_base_name.pub.pem
 certcheck version
 certcheck help

=head1 DESCRIPTION

The C<certcheck> command verifies a certificate.
For a certificate signed by a certification authority, the three parts (public, private and chain) are checked with C<openssl>.
For a self-signed certificate, it is verified that it works correctly with C<openssl>.

=head1 SUBCOMMANDS

=head2 C<check>

The subcommand C<check> verify the certificate chain
and takes the certificate name base as input.
The three certificates (public, private and chain parts) can take the form:

 cert_base_name.pub.pem
 cert_base_name.key.pem
 cert_base_name.chain.pem

or one of theses...

 cert_base_name.crt     cert_base_name.cer
 cert_base_name.key     cert_base_name.keystore
 cert_base_name.bundle  cert_base_name.ca-bundle

In the case of a self-signed certificate,
the C<check> command does not search for a certification chain file, but only verifies that the certificate is valid.

Example:

 certcheck check cert_base_name

=head2 C<text> or C<txt> or C<info>

The C<text> (or C<txt>, C<info>) subcommand returns the main values
(lifetime, DNS name...) of the public key.
The certificate's name base can also be used as command-line input,
in which case the same rules as with L<check> are applied
to find the public certificate.

 certcheck text  cert_base_name.pub.pem
 certcheck txt   cert_base_name.pub.pem
 certcheck info  cert_base_name.pub.pem

=head2 C<version>

The C<version> subcommand returns the version of C<certcheck>.

 certcheck version

=head2 C<help>

The C<help> subcommand returns this help.

 certcheck help


=head1 SEE ALSO

Own project ressources:

=over

=item * L<Web site (Gitlab)|https://gricad-gitlab.univ-grenoble-alpes.fr/legi/soft/trokata/certcheck>

=item * L<Online Manual|https://legi.gricad-pages.univ-grenoble-alpes.fr/soft/trokata/certcheck/certcheck.html>

=item * L<Download package (Debian)|https://legi.gricad-pages.univ-grenoble-alpes.fr/soft/trokata/certcheck/download/>

=back

Note: The master Git repository in on the L<GRICAD Gitlab|https://gricad-gitlab.univ-grenoble-alpes.fr/legi/soft/trokata/certcheck>.
Other Git repository are mirror or fork.


=head1 AUTHORS

Written by Valentin Hilbig (hilbix https://gist.github.com/hilbix/bde7c02009544faed7a1)
and extended by Gabriel Moreau <Gabriel.Moreau@univ-grenoble-alpes.fr>, Grenoble - France


=head1 COPYRIGHT

=over

=item Copyright (C) 2015, Valentin Hilbig,

=item Copyright (C) 2023-2025, LEGI UMR 5519 / CNRS UGA G-INP, Grenoble, France.

=back

Licence: CC0 (Creative Commons Zero - https://spdx.org/licenses/CC0-1.0)


